/**
 * Students
 * Popis Druhý odstavec popisu. Nějaký **tučný** text.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import StudentDto from '../dto/StudentDto';

/**
* Default service.
* @module client/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:client/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Summary
     * Description
     * @param {Number} studentId Description
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteStudentWithHttpInfo(studentId) {
      let postBody = null;

      // verify the required parameter 'studentId' is set
      if (studentId === undefined || studentId === null) {
        throw new Error("Missing the required parameter 'studentId' when calling deleteStudent");
      }


      let pathParams = {
        'studentId': studentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/students/{studentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Summary
     * Description
     * @param {Number} studentId Description
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteStudent(studentId) {
      return this.deleteStudentWithHttpInfo(studentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Summary
     * Description
     * @param {Number} studentId Description
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:dto/StudentDto} and HTTP response
     */
    getStudentWithHttpInfo(studentId) {
      let postBody = null;

      // verify the required parameter 'studentId' is set
      if (studentId === undefined || studentId === null) {
        throw new Error("Missing the required parameter 'studentId' when calling getStudent");
      }


      let pathParams = {
        'studentId': studentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = StudentDto;

      return this.apiClient.callApi(
        '/students/{studentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Summary
     * Description
     * @param {Number} studentId Description
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:dto/StudentDto}
     */
    getStudent(studentId) {
      return this.getStudentWithHttpInfo(studentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Summary for the operation.
     * Description for the operation. Second paragraph of the description.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:dto/StudentDto>} and HTTP response
     */
    getStudentsWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = [StudentDto];

      return this.apiClient.callApi(
        '/students', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Summary for the operation.
     * Description for the operation. Second paragraph of the description.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:dto/StudentDto>}
     */
    getStudents() {
      return this.getStudentsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Summary
     * Description
     * @param {module:dto/StudentDto} student Description
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Number'} and HTTP response
     */
    postStudentWithHttpInfo(student) {
      let postBody = student;

      // verify the required parameter 'student' is set
      if (student === undefined || student === null) {
        throw new Error("Missing the required parameter 'student' when calling postStudent");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = 'Number';

      return this.apiClient.callApi(
        '/students', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Summary
     * Description
     * @param {module:dto/StudentDto} student Description
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Number'}
     */
    postStudent(student) {
      return this.postStudentWithHttpInfo(student)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Summary
     * Description
     * @param {Number} studentId Description
     * @param {module:dto/StudentDto} student Description
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    putStudentWithHttpInfo(studentId, student) {
      let postBody = student;

      // verify the required parameter 'studentId' is set
      if (studentId === undefined || studentId === null) {
        throw new Error("Missing the required parameter 'studentId' when calling putStudent");
      }

      // verify the required parameter 'student' is set
      if (student === undefined || student === null) {
        throw new Error("Missing the required parameter 'student' when calling putStudent");
      }


      let pathParams = {
        'studentId': studentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/students/{studentId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Summary
     * Description
     * @param {Number} studentId Description
     * @param {module:dto/StudentDto} student Description
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    putStudent(studentId, student) {
      return this.putStudentWithHttpInfo(studentId, student)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
